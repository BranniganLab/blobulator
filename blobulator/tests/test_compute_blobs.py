
# Generated by CodiumAI
from compute_blobs import domain_to_numbers


import pytest

class TestDomainToNumbers:

    # Test that a residue in a hydrophobic blob returns a height of 0.6
    def test_residue_in_hydrophobic_blob(self):
        # Define an array containing the type of blob that each residue falls into
        x = [['h']]

        # Invoke the `domain_to_numbers` function
        result = domain_to_numbers(x)

        # Check that the result is equal to 0.6
        assert result == 0.6

    # Test that a residue in a polar blob returns a height of 0.4
    def test_residue_in_polar_blob(self):
        # Define an array containing the type of blob that each residue falls into
        x = [['s']]

        # Invoke the `domain_to_numbers` function
        result = domain_to_numbers(x)

        # Check that the result is equal to 0.4
        assert result == 0.4

    # Test that a residue in a charged blob returns a height of 0.2
    def test_residue_in_charged_blob(self):
        # Define an array containing the type of blob that each residue falls into
        x = [['p']]

        # Invoke the `domain_to_numbers` function
        result = domain_to_numbers(x)

        # Check that the result is equal to 0.2
        assert result == 0.2

    # Test that a non-empty input returns the correct height
    def test_non_empty_input(self):
        # Define a non-empty array
        x = [["p"]]

        # Invoke the `domain_to_numbers` function
        result = domain_to_numbers(x)

        # Check that the result is the correct height
        assert result == 0.2

    # Test that an input with only a domain type returns the correct height for each residue
    def test_input_with_only_domain_type(self):
        # Define an array containing the type of blob that each residue falls into
        x = [['h'], ['h'], ['h']]

        # Invoke the `domain_to_numbers` function
        result = domain_to_numbers(x)

        # Check that the result is the correct height for each residue
        assert result == 0.6

    # Test that an input with only a hydropathy value returns 0.2
    def test_input_with_only_hydropathy_value(self):
        # Define an array containing the type of blob that each residue falls into
        x = [['p'], ['p'], ['p']]

        # Invoke the `domain_to_numbers` function
        result = domain_to_numbers(x)

        # Check that the result is 0.2
        assert result == 0.2

    # Test that a residue in a non-hydrophobic, non-polar, and non-charged blob returns a height of 0.4
    def test_residue_in_non_hydrophobic_blob(self):
        # Define an array containing the type of blob that each residue falls into
        x = [['s']]

        # Invoke the `domain_to_numbers` function
        result = domain_to_numbers(x)

        # Check that the result is equal to 0.4
        assert result == 0.4

    # Test that an input with a domain type and hydropathy value returns the correct height
    def test_input_with_domain_type_and_hydropathy_value(self):
        # Define an array containing the type of blob that each residue falls into
        x = [['p', 0.2]]

        # Invoke the `domain_to_numbers` function
        result = domain_to_numbers(x)

        # Check that the result is equal to 0.2
        assert result == 0.2

    # Test that an input with a domain type that is not 'p', 'h', or 't' raises a ValueError
    def test_input_with_invalid_domain_type(self):
        # Define an array containing the type of blob that each residue falls into
        x = [['x']]

        # Invoke the `domain_to_numbers` function
        with pytest.raises(ValueError):
            domain_to_numbers(x)



# Generated by CodiumAI

import pytest

class TestPhaseDiagram:

    # Returns the correct rgb value for region 1
    def test_region_1(self):
        x = [0.2, 0.1, 0.3, 0.4]
        color = phase_diagram(x)
        assert color == "rgb(138.0,251.0,69.0)"

    # Returns the correct rgb value for region 2
    def test_region_2(self):
        x = [0.3, 0.2, 0.4, 0.5]
        color = phase_diagram(x)
        assert color == "rgb(138.0,251.0,69.0)"

    # Returns the correct rgb value for region 3
    def test_region_3(self):
        x = [0.3, 0.4, 0.6, 0.2]
        expected_color = 'mediumorchid'
        result = phase_diagram(x)
        assert result == expected_color, f'Expected color: {expected_color}, but got: {result}'

    # Returns an error message when fp > 0.35 and fn > 0.35
    def test_error_message(self):
        x = [0.4, 0.5, 0.6, 0.7]
        with pytest.raises(ValueError, match="Algorithm bug when coping with phase plot regions"):
            phase_diagram(x)

    # Returns the correct rgb value for fcr = 0.25 and ncpr = 0.35
    def test_fcr_0_25_ncpr_0_35(self):
        x = [0.35, 0.35, 0.4, 0.2]
        color = phase_diagram(x)
        assert color == "rgb(254.0,230.0,90.0)"


# Generated by CodiumAI

import pytest

class TestCompute:

    # Test that the function returns a dataframe
    def test_returns_dataframe(self):
        # Arrange
        seq = "ARND"
        cutoff = 0.5
        domain_threshold = 5
        hydro_scale = 'kyte_doolittle'
        window = 3
        disorder_residues = []
    
        # Act
        result = compute(seq, cutoff, domain_threshold, hydro_scale, window, disorder_residues)
    
        # Assert
        assert isinstance(result, pd.DataFrame)

    # Test that the dataframe has the expected columns
    def test_has_expected_columns(self):
        # Arrange
        seq = "ARND"
        cutoff = 0.5
        domain_threshold = 5
        hydro_scale = 'kyte_doolittle'
        window = 3
        disorder_residues = []
    
        # Act
        result = compute(seq, cutoff, domain_threshold, hydro_scale, window, disorder_residues)
    
        # Assert
        expected_columns = ["seq_name", "resid", "disorder", "hydropathy", "charge", "window", "m_cutoff", "domain_threshold", "hydropathy_3_window_mean", "hydropathy_digitized", "domain_pre", "domain", "blobtype", "domain_to_numbers", "N", "H", "min_h", "NCPR", "f+", "f-", "fcr", "h_blob_enrichment", "h_numerical_enrichment", "blob_color", "P_diagram", "blob_charge_class", "U_diagram", "NCPR_color", "uversky_color", "disorder_color"]
        assert result.columns.tolist() == expected_columns

    # Test that the function returns the expected number of rows
    def test_returns_expected_number_of_rows(self):
        # Arrange
        seq = "ARND"
        cutoff = 0.5
        domain_threshold = 5
        hydro_scale = 'kyte_doolittle'
        window = 3
        disorder_residues = []
    
        # Act
        result = compute(seq, cutoff, domain_threshold, hydro_scale, window, disorder_residues)
    
        # Assert
        expected_rows = len(seq)
        assert len(result) == expected_rows

    # Test that the function returns the expected values for the 'hydropathy_digitized' column when all values are NaN
    def test_returns_expected_values_for_hydropathy_digitized_when_all_nan(self):
        # Arrange
        seq = 'AAAA'
        cutoff = 0.5
        domain_threshold = min(len(seq), 5)
        hydro_scale = 'kyte_doolittle'
        window = 3
        disorder_residues = []

        # Act
        result = compute(seq, cutoff, domain_threshold, hydro_scale, window, disorder_residues)

        # Assert
        expected_values = [1, 1, 1, 1]
        assert result['hydropathy_digitized'].tolist() == expected_values

    # Test that the function returns the expected values for the 'domain' column when all values are NaN
    def test_returns_expected_values_for_domain_when_all_nan(self):
        # Arrange
        seq = "AAAAAAAA"
        cutoff = 0.5
        domain_threshold = 5
        hydro_scale = 'kyte_doolittle'
        window = 3
        disorder_residues = []

        # Act
        result = compute(seq, cutoff, domain_threshold, hydro_scale, window, disorder_residues)

        # Assert
        expected_values = ['h1', 'h1', 'h1', 'h1', 'h1', 'h1', 'h1', 'h1']
        assert result["domain"].tolist() == expected_values